<?php

/**
 * @file
 * Tests for news.module.
 */

class NewsTestCase extends DrupalWebTestCase {
  protected $big_user;
  protected $own_user;
  protected $any_user;

  public static function getInfo() {
    return array(
      'name' => 'News functionality',
      'description' => 'Create, view, edit, delete, and change news entries and verify its consistency in the database.',
      'group' => 'News',
    );
  }

  /**
   * Enable modules and create users with specific permissions.
   */
  function setUp() {
    parent::setUp('news');
    // Create users.
    $this->big_user = $this->drupalCreateUser(array('administer blocks'));
    $this->own_user = $this->drupalCreateUser(array('create news content', 'edit own news content', 'delete own news content'));
    $this->any_user = $this->drupalCreateUser(array('create news content', 'edit any news content', 'delete any news content', 'access administration pages'));
  }

  /**
   * Confirm that the "You are not allowed to post a new news entry." message
   * shows up if a user submitted news entries, has been denied that
   * permission, and goes to the news page.
   */
  function testUnprivilegedUser() {
    // Create a news node for a user with no news permissions.
    $this->drupalCreateNode(array('type' => 'news', 'uid' => $this->big_user->uid));

    $this->drupalLogin($this->big_user);

    $this->drupalGet('news/' . $this->big_user->uid);
    $this->assertResponse(200);
    $this->assertTitle(t("@name's news", array('@name' => format_username($this->big_user))) . ' | Drupal', t('News title was displayed'));
    $this->assertText(t('You are not allowed to post a new news entry.'), t('No new entries can be posted without the right permission'));
  }

  /**
   * View the news of a user with no news entries as another user.
   */
  function testNewsPageNoEntries() {
    $this->drupalLogin($this->big_user);

    $this->drupalGet('news/' . $this->own_user->uid);
    $this->assertResponse(200);
    $this->assertTitle(t("@name's news", array('@name' => format_username($this->own_user))) . ' | Drupal', t('News title was displayed'));
    $this->assertText(t('@author has not created any news entries.', array('@author' => format_username($this->own_user))), t('Users news displayed with no entries'));
  }

  /**
   * Login users, create news nodes, and test news functionality through the admin and user interfaces.
   */
  function testNews() {
    // Login the admin user.
    $this->drupalLogin($this->big_user);
    // Enable the recent news block.
    $edit = array();
    $edit['blocks[news_recent][region]'] = 'sidebar_second';
    $this->drupalPost('admin/structure/block', $edit, t('Save blocks'));
    $this->assertResponse(200);
    // Verify ability to change number of recent news posts in block.
    $edit = array();
    $edit['news_block_count'] = 5;
    $this->drupalPost('admin/structure/block/manage/news/recent/configure', $edit, t('Save block'));
    $this->assertEqual(variable_get('news_block_count', 10), 5, t('Number of recent news posts changed.'));

    // Do basic tests for each user.
    $this->doBasicTests($this->any_user, TRUE);
    $this->doBasicTests($this->own_user, FALSE);

    // Create another news node for the any news user.
    $node = $this->drupalCreateNode(array('type' => 'news', 'uid' => $this->any_user->uid));
    // Verify the own news user only has access to the news view node.
    $this->verifyNews($this->any_user, $node, FALSE, 403);

    // Create another news node for the own news user.
    $node = $this->drupalCreateNode(array('type' => 'news', 'uid' => $this->own_user->uid));
    // Login the any news user.
    $this->drupalLogin($this->any_user);
    // Verify the any news user has access to all the news nodes.
    $this->verifyNews($this->own_user, $node, TRUE);
  }

  /**
   * Run basic tests on the indicated user.
   *
   * @param object $user
   *   The logged in user.
   * @param boolean $admin
   *   User has 'access administration pages' privilege.
   */
  private function doBasicTests($user, $admin) {
    // Login the user.
    $this->drupalLogin($user);
    // Create news node.
    $node = $this->drupalCreateNode(array('type' => 'news'));
    // Verify the user has access to all the news nodes.
    $this->verifyNews($user, $node, $admin);
    // Create one more node to test the news page with more than one node
    $this->drupalCreateNode(array('type' => 'news', 'uid' => $user->uid));
    // Verify the news links are displayed.
    $this->verifyNewsLinks($user);
  }

  /**
   * Verify the logged in user has the desired access to the various news nodes.
   *
   * @param object $node_user
   *   The user who creates the node.
   * @param object $node
   *   A node object.
   * @param boolean $admin
   *   User has 'access administration pages' privilege.
   * @param integer $response
   *   HTTP response code.
   */
  private function verifyNews($node_user, $node, $admin, $response = 200) {
    $response2 = ($admin) ? 200 : 403;

    // View news help node.
    $this->drupalGet('admin/help/news');
    $this->assertResponse($response2);
    if ($response2 == 200) {
      $this->assertTitle(t('News | Drupal'), t('News help node was displayed'));
      $this->assertText(t('News'), t('News help node was displayed'));
    }

    // Verify the news block was displayed.
    $this->drupalGet('');
    $this->assertResponse(200);
    $this->assertText(t('Recent news posts'), t('News block was displayed'));

    // View news node.
    $this->drupalGet('node/' . $node->nid);
    $this->assertResponse(200);
    $this->assertTitle($node->title . ' | Drupal', t('News node was displayed'));
    $breadcrumb = array(
      l(t('Home'), NULL),
      l(t('News'), 'news'),
      l(t("!name's news", array('!name' => format_username($node_user))), 'news/' . $node_user->uid),
    );
    $this->assertRaw(theme('breadcrumb', array('breadcrumb' => $breadcrumb)), t('Breadcrumbs were displayed'));

    // View news edit node.
    $this->drupalGet('node/' . $node->nid . '/edit');
    $this->assertResponse($response);
    if ($response == 200) {
      $this->assertTitle('Edit News entry ' . $node->title . ' | Drupal', t('News edit node was displayed'));
    }

    if ($response == 200) {
      // Edit news node.
      $edit = array();
      $langcode = LANGUAGE_NONE;
      $edit["title"] = 'node/' . $node->nid;
      $edit["body[$langcode][0][value]"] = $this->randomName(256);
      $this->drupalPost('node/' . $node->nid . '/edit', $edit, t('Save'));
      $this->assertRaw(t('News entry %title has been updated.', array('%title' => $edit["title"])), t('News node was edited'));

      // Delete news node.
      $this->drupalPost('node/' . $node->nid . '/delete', array(), t('Delete'));
      $this->assertResponse($response);
      $this->assertRaw(t('News entry %title has been deleted.', array('%title' => $edit["title"])), t('News node was deleted'));
    }
  }

  /**
   * Verify the news links are displayed to the logged in user.
   *
   * @param object $user
   *   The logged in user.
   */
  private function verifyNewsLinks($user) {
    // Confirm news entries link exists on the user page.
    $this->drupalGet('user/' . $user->uid);
    $this->assertResponse(200);
    $this->assertText(t('View recent news entries'), t('View recent news entries link was displayed'));

    // Confirm the recent news entries link goes to the user's news page.
    $this->clickLink('View recent news entries');
    $this->assertTitle(t("@name's news | Drupal", array('@name' => format_username($user))), t('View recent news entries link target was correct'));

    // Confirm a news page was displayed.
    $this->drupalGet('news');
    $this->assertResponse(200);
    $this->assertTitle('News | Drupal', t('News page was displayed'));
    $this->assertText(t('Home'), t('Breadcrumbs were displayed'));
    $this->assertLink(t('Create new news entry'));

    // Confirm a news page was displayed per user.
    $this->drupalGet('news/' . $user->uid);
    $this->assertTitle(t("@name's news | Drupal", array('@name' => format_username($user))), t('User news node was displayed'));

    // Confirm a news feed was displayed.
    $this->drupalGet('news/feed');
    $this->assertTitle(t('Drupal news'), t('News feed was displayed'));

    // Confirm a news feed was displayed per user.
    $this->drupalGet('news/' . $user->uid . '/feed');
    $this->assertTitle(t("@name's news", array('@name' => format_username($user))), t('User news feed was displayed'));
  }
}
