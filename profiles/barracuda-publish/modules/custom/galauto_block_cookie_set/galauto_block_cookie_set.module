<?php
/**
 * @file
 * Module file for block_example.
 */

/**
 * @defgroup block_example Example: Block
 * @ingroup examples
 * @{
 * Demonstrates code creation of blocks.
 *
 * This is an example outlining how a module can define blocks that can be
 * displayed on various pages of a site, or how to alter blocks provided by
 * other modules.
 */

/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function galauto_block_cookie_set_block_info() {
  // This hook returns an array, each component of which is an array of block
  // information. The array keys are the 'delta' values used in other block
  // hooks.
  //
  // The required block information is a block description, which is shown
  // to the site administrator in the list of possible blocks. You can also
  // provide initial settings for block weight, status, etc.
  //
  // Many options are defined in hook_block_info():

  // This sample shows how to provide default settings. In this case we'll
  // enable the block in the first sidebar and make it visible only on
  // 'node/*' pages. See the hook_block_info() documentation for these.
  $blocks['location'] = array(
    'info' => t('Location block'),
    'status' => TRUE,
    'region' => 'header_right',
  );

  return $blocks;
}

/**
 * Implements hook_block_configure().
 *
 * This hook declares configuration options for blocks provided by this module.
 */


function galauto_block_cookie_set_block_configure($delta = '') {
  $form = array();
  // The $delta parameter tells us which block is being configured.
  // In this example, we'll allow the administrator to customize
  // the text of the 'configurable text string' block defined in this module.
  if ($delta == 'location') {
    // All we need to provide is the specific configuration options for our
    // block. Drupal will take care of the standard block configuration options
    // (block title, page visibility, etc.) and the save button.
    

    /*$form['block_cookie_set_string'] = array(
      '#type' => 'textfield',
      '#title' => t('Machine vocabulary name'),
      '#size' => 60,
      '#description' => t('This text will appear in the example block.'),
      '#default_value' => variable_get('block_cookie_set_string', t('Some some.')),
    );
    */
    $vocabulary_array = taxonomy_vocabulary_get_names();
    foreach($vocabulary_array as $value){
      $option[$value->machine_name] = $value->name;
    }

    $form['block_cookie_set_string'] = array(
      '#type' => 'select',
      '#title' => 'Select vocabulary',
      '#options' => $option,
      '#default_value' => variable_get('block_cookie_set_string', key($option)),
    );
    
    $form['block_cookie_set_use_ajax'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use ajax'),
      '#description' => '',
      '#default_value' => variable_get('block_cookie_set_use_ajax', TRUE),
    );
  }
  return $form;
}

/**
 * Implements hook_block_save().
 *
 * This hook declares how the configured options for a block
 * provided by this module are saved.
 */

function galauto_block_cookie_set_block_save($delta = '', $edit = array()) {
  // We need to save settings from the configuration form.
  // We need to check $delta to make sure we are saving the right block.
  if ($delta == 'location') {
    // Have Drupal save the string to the database.
    variable_set('block_cookie_set_string', $edit['block_cookie_set_string']);
    variable_set('block_cookie_set_use_ajax', $edit['block_cookie_set_use_ajax']);
  }
}


/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function galauto_block_cookie_set_block_view($delta = '') {
  // The $delta parameter tells us which block is being requested.
  switch ($delta) {

    case 'location':
      //$block['subject'] = t('block_cookie_set');
      $block['content'] = drupal_get_form('block_dependent_dropdown');
      $block['vocabulary'] = galauto_block_cookie_set_contents($delta);
      break;
  }





/*
$misto = $_COOKIE['Drupal_visitor_location'];
$term = taxonomy_get_term_by_name($misto);
dpm(key($term));
*/







  return $block;
}

/**
 * A module-defined block content function.
 */

function galauto_block_cookie_set_contents($which_block) {
  switch ($which_block) {
    case 'location':
      // Modules would typically perform some database queries to fetch the
      // content for their blocks. Here, we'll just use the variable set in the
      // block configuration or, if none has set, a default value.
      // Block content can be returned in two formats: renderable arrays
      // (as here) are preferred though a simple string will work as well.
      // Block content created through the UI defaults to a string.
      $result = array(
        '#vocabulary' => variable_get('block_cookie_set_string',
          t('A default value. This block was created at %time',
            array('%time' => date('c'))
          )
        ),
        '#ajax' => variable_get('block_cookie_set_use_ajax',
          TRUE
        ),
      );

      return $result;
  }
}

/**
 * Helper function to populate the first dropdown.
 *
 * This would normally be pulling data from the database.
 *
 * @return array
 *   Dropdown options.
 */

function made_array_of_taxonomy_terms($reg){
	$v =  taxonomy_vocabulary_machine_name_load($reg);
    $t = taxonomy_get_tree($v->vid);
    $regions = array();
    foreach($t as $value){
    	$regions[] = t($value->name);
    }
    return($regions);
}

function _ajax_example_get_first_dropdown_options() {
  $region = galauto_block_cookie_set_contents('location');
  // drupal_map_assoc() just makes an array('String' => 'String'...).
  return drupal_map_assoc(made_array_of_taxonomy_terms($region['#vocabulary']));
}

function ajax_example_dependent_dropdown_callback($form_state) {
  //dpm($form_state['dropdown_first']['#value']);
  $location = $form_state['dropdown_first']['#value'];
  user_cookie_save(array('location'=>$location));
}

function block_dependent_dropdown($form, &$form_state) {
  // Get the list of options to populate the first dropdown.
  $options_first = _ajax_example_get_first_dropdown_options();
  // If we have a value for the first dropdown from $form_state['values'] we use
  // this both as the default value for the first dropdown and also as a
  // parameter to pass to the function that retrieves the options for the
  // second dropdown.
  //dpm($form_state);
  $selected = isset($_COOKIE['Drupal_visitor_location']) ? $_COOKIE['Drupal_visitor_location'] : key($options_first);
  $use_ajax = galauto_block_cookie_set_contents('location')['#ajax'];

  if ($use_ajax){
    $form['dropdown_first'] = array(
      '#type' => 'select',
      '#title' => 'Your location',
      '#options' => $options_first,
      '#default_value' => $selected,
      // Bind an ajax callback to the change event (which is the default for the
      // select form type) of the first dropdown. It will replace the second
      // dropdown when rebuilt.
      '#ajax' => array(
        // When 'event' occurs, Drupal will perform an ajax request in the
        // background. Usually the default value is sufficient (eg. change for
        // select elements), but valid values include any jQuery event,
        // most notably 'mousedown', 'blur', and 'submit'.
        // 'event' => 'change',
        'callback' => 'ajax_example_dependent_dropdown_callback',
        'wrapper' => 'dropdown-second-replace',
      ),
    );

    $form['submit'] = array(
      '#type' => 'autosubmit',
    );
  }else{
    ctools_add_js('auto-submit');
    $form['dropdown_first'] = array(
      '#type' => 'select',
      '#title' => 'Your location',
      '#options' => $options_first,
      '#default_value' => $selected,
      '#attributes' => array('class' => array('ctools-auto-submit')),
      //'#callback' => 'ajax_example_dependent_dropdown_callback',// - See more at: http://www.webomelette.com/how-to-create-autocomplete-widget-drupal-7#sthash.65zz45lq.dpuf
      // Bind an ajax callback to the change event (which is the default for the
      // select form type) of the first dropdown. It will replace the second
      // dropdown when rebuilt.
    );

    $form['submit'] = array(
      '#type' => 'submit',
      '#attributes' => array('class' => array('ctools-auto-submit-click', 'element-invisible')),
      '#submit' => array('ajax_example_dependent_dropdown_callback'),
    );
  }
  return $form;
}