<?php

/**
 * @file
 * Enables multi-user adverts.
 */

/**
 * Implements hook_node_info().
 */
function advert_node_info() {
  return array(
    'advert' => array(
      'name' => t('Advert entry'),
      'base' => 'advert',
      'description' => t('Use for multi-user adverts. Every user gets a personal advert.'),
    )
  );
}

/**
 * Implements hook_user_view().
 */
function advert_user_view($account) {
  if (user_access('create advert content', $account)) {
    $account->content['summary']['advert'] =  array(
      '#type' => 'user_profile_item',
      '#title' => t('Advert'),
      // l() escapes the attributes, so we should not escape !username here.
      '#markup' => l(t('View recent advert entries'), "advert/$account->uid", array('attributes' => array('title' => t("Read !username's latest advert entries.", array('!username' => format_username($account)))))),
      '#attributes' => array('class' => array('advert')),
    );
  }
}

/**
 * Implements hook_help().
 */
function advert_help($path, $arg) {
  switch ($path) {
    case 'admin/help#advert':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t("The Advert module allows registered users to maintain an online journal, or <em>advert</em>. Adverts are made up of individual <em>advert entries</em>. By default, the advert entries are displayed by creation time in descending order, with comments enabled, and are promoted to the site's front page. For more information, see the online handbook entry for <a href='@advert'>Advert module</a>.", array('@advert' => 'http://drupal.org/handbook/modules/advert/')) . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Single-user adverts') . '</dt>';
      $output .= '<dd>' . t("Each user's advert entries are automatically displayed with a link to the user's main advert page. You can create as many single-user adverts as you have site users with permission to create advert content.") . '</dd>';
      $output .= '<dt>' . t('Multi-user adverts') . '</dt>';
      $output .= '<dd>' . t("Advert entries from each single-user advert are also aggregated into one central multi-user advert, which displays the advert content of all users in a single listing.") . '</dd>';
      $output .= '<dt>' . t('Navigation') . '</dt>';
      $output .= '<dd>' . t("There is an optional <em>Adverts</em> menu item added to the Navigation menu, which displays all adverts available on your site, and a <em>My advert</em> item displaying the current user's advert entries.") . '</dd>';
      $output .= '<dt>' . t('Blocks') . '</dt>';
      $output .= '<dd>' . t('The Advert module also creates a default <em>Recent advert posts</em> block that may be enabled at the <a href="@blocks">blocks administration page</a>.', array('@blocks' => url('admin/structure/block'))) . '</dd>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implements hook_form().
 */
function advert_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Implements hook_view().
 */
function advert_view($node, $view_mode) {
  if ($view_mode == 'full' && node_is_page($node)) {
    // Breadcrumb navigation.  l() escapes title, so we should not escape !name.
    drupal_set_breadcrumb(array(l(t('Home'), NULL), l(t('Adverts'), 'advert'), l(t("!name's advert", array('!name' => format_username($node))), 'advert/' . $node->uid)));
  }
  return $node;
}

/**
 * Implements hook_node_view().
 */
function advert_node_view($node, $view_mode) {
  if ($view_mode != 'rss') {
    if ($node->type == 'advert' && (arg(0) != 'advert' || arg(1) != $node->uid)) {
      // This goes to l(), which escapes !username in both title and attributes.
      $links['advert_usernames_advert'] = array(
        'title' => t("!username's advert", array('!username' => format_username($node))),
        'href' => "advert/$node->uid",
        'attributes' => array('title' => t("Read !username's latest advert entries.", array('!username' => format_username($node)))),
      );
      $node->content['links']['advert'] = array(
        '#theme' => 'links__node__advert',
        '#links' => $links,
        '#attributes' => array('class' => array('links', 'inline')),
      );
    }
  }
}

/**
 * Implements hook_menu().
 */
function advert_menu() {
  $items['advert'] = array(
    'title' => 'Adverts',
    'page callback' => 'advert_page_last',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'advert.pages.inc',
  );
  $items['advert/%user_uid_optional'] = array(
    'title' => 'My advert',
    'page callback' => 'advert_page_user',
    'page arguments' => array(1),
    'access callback' => 'advert_page_user_access',
    'access arguments' => array(1),
    'file' => 'advert.pages.inc',
  );
  $items['advert/%user/feed'] = array(
    'title' => 'Adverts',
    'page callback' => 'advert_feed_user',
    'page arguments' => array(1),
    'access callback' => 'advert_page_user_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'advert.pages.inc',
  );
  $items['advert/feed'] = array(
    'title' => 'Adverts',
    'page callback' => 'advert_feed_last',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'advert.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function advert_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  global $user;

  // Add action link to 'node/add/advert' on 'advert' page.
  if ($root_path == 'advert') {
    $item = menu_get_item('node/add/advert');
    if ($item['access']) {
      $item['title'] = t('Create new advert entry');
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
  // Provide a helper action link to the author on the 'advert/%' page.
  elseif ($root_path == 'advert/%' && $router_item['page_arguments'][0]->uid == $user->uid) {
    $data['actions']['output']['advert'] = array(
      '#theme' => 'menu_local_action',
    );
    if (user_access('create advert content')) {
      $data['actions']['output']['advert']['#link']['title'] = t('Post new advert entry.');
      $data['actions']['output']['advert']['#link']['href'] = 'node/add/advert';
    }
    else {
      $data['actions']['output']['advert']['#link']['title'] = t('You are not allowed to post a new advert entry.');
    }
  }
}

/**
 * Access callback for user advert pages.
 */
function advert_page_user_access($account) {
  // The visitor must be able to access the site's content.
  // For a advert to 'exist' the user must either be able to
  // create new advert entries, or it must have existing posts.
  return $account->uid && user_access('access content') && (user_access('create advert content', $account) || _advert_post_exists($account));
}

/**
 * Helper function to determine if a user has advert posts already.
 */
function _advert_post_exists($account) {
  return (bool)db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('type', 'advert')
    ->condition('uid', $account->uid)
    ->condition('status', 1)
    ->range(0, 1)
    ->addTag('node_access')
    ->execute()
    ->fetchField();
}

/**
 * Implements hook_block_info().
 */
function advert_block_info() {
  $block['recent']['info'] = t('Recent advert posts');
  $block['recent']['properties']['administrative'] = TRUE;
  return $block;
}

/**
 * Implements hook_block_configure().
 */
function advert_block_configure($delta = '') {
  if ($delta == 'recent') {
    $form['advert_block_count'] = array(
      '#type' => 'select',
      '#title' => t('Number of recent advert posts to display'),
      '#default_value' => variable_get('advert_block_count', 10),
      '#options' => drupal_map_assoc(array(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 25, 30)),
    );
    return $form;
  }
}

/**
 * Implements hook_block_save().
 */
function advert_block_save($delta = '', $edit = array()) {
  if ($delta == 'recent') {
    variable_set('advert_block_count', $edit['advert_block_count']);
  }
}

/**
 * Implements hook_block_view().
 *
 * Displays the most recent 10 advert titles.
 */
function advert_block_view($delta = '') {
  global $user;

  if (user_access('access content')) {
    $result = db_select('node', 'n')
      ->fields('n', array('nid', 'title', 'created'))
      ->condition('type', 'advert')
      ->condition('status', 1)
      ->orderBy('created', 'DESC')
      ->range(0, variable_get('advert_block_count', 10))
      ->addTag('node_access')
      ->execute();

    if ($node_title_list = node_title_list($result)) {
      $block['subject'] = t('Recent advert posts');
      $block['content']['advert_list'] = $node_title_list;
      $block['content']['advert_more'] = array(
        '#theme' => 'more_link',
        '#url' => 'advert',
        '#title' => t('Read the latest advert entries.'),
      );

      return $block;
    }
  }
}

/**
 * Implements hook_rdf_mapping().
 */
function advert_rdf_mapping() {
  return array(
    array(
      'type' => 'node',
      'bundle' => 'advert',
      'mapping' => array(
        'rdftype' => array('sioc:Post', 'sioct:AdvertPost'),
      ),
    ),
  );
}
