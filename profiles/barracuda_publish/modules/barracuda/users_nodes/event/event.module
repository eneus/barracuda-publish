<?php

/**
 * @file
 * Enables multi-user events.
 */

/**
 * Implements hook_node_info().
 */
function event_node_info() {
  return array(
    'event' => array(
      'name' => t('Event entry'),
      'base' => 'event',
      'description' => t('Use for multi-user events. Every user gets a personal event.'),
    )
  );
}

/**
 * Implements hook_user_view().
 */
function event_user_view($account) {
  if (user_access('create event content', $account)) {
    $account->content['summary']['event'] =  array(
      '#type' => 'user_profile_item',
      '#title' => t('Event'),
      // l() escapes the attributes, so we should not escape !username here.
      '#markup' => l(t('View recent event entries'), "event/$account->uid", array('attributes' => array('title' => t("Read !username's latest event entries.", array('!username' => format_username($account)))))),
      '#attributes' => array('class' => array('event')),
    );
  }
}

/**
 * Implements hook_help().
 */
function event_help($path, $arg) {
  switch ($path) {
    case 'admin/help#event':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t("The Event module allows registered users to maintain an online journal, or <em>event</em>. Events are made up of individual <em>event entries</em>. By default, the event entries are displayed by creation time in descending order, with comments enabled, and are promoted to the site's front page. For more information, see the online handbook entry for <a href='@event'>Event module</a>.", array('@event' => 'http://drupal.org/handbook/modules/event/')) . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Single-user events') . '</dt>';
      $output .= '<dd>' . t("Each user's event entries are automatically displayed with a link to the user's main event page. You can create as many single-user events as you have site users with permission to create event content.") . '</dd>';
      $output .= '<dt>' . t('Multi-user events') . '</dt>';
      $output .= '<dd>' . t("Event entries from each single-user event are also aggregated into one central multi-user event, which displays the event content of all users in a single listing.") . '</dd>';
      $output .= '<dt>' . t('Navigation') . '</dt>';
      $output .= '<dd>' . t("There is an optional <em>Events</em> menu item added to the Navigation menu, which displays all events available on your site, and a <em>My event</em> item displaying the current user's event entries.") . '</dd>';
      $output .= '<dt>' . t('Blocks') . '</dt>';
      $output .= '<dd>' . t('The Event module also creates a default <em>Recent event posts</em> block that may be enabled at the <a href="@blocks">blocks administration page</a>.', array('@blocks' => url('admin/structure/block'))) . '</dd>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implements hook_form().
 */
function event_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Implements hook_view().
 */
function event_view($node, $view_mode) {
  if ($view_mode == 'full' && node_is_page($node)) {
    // Breadcrumb navigation.  l() escapes title, so we should not escape !name.
    drupal_set_breadcrumb(array(l(t('Home'), NULL), l(t('Events'), 'event'), l(t("!name's event", array('!name' => format_username($node))), 'event/' . $node->uid)));
  }
  return $node;
}

/**
 * Implements hook_node_view().
 */
function event_node_view($node, $view_mode) {
  if ($view_mode != 'rss') {
    if ($node->type == 'event' && (arg(0) != 'event' || arg(1) != $node->uid)) {
      // This goes to l(), which escapes !username in both title and attributes.
      $links['event_usernames_event'] = array(
        'title' => t("!username's event", array('!username' => format_username($node))),
        'href' => "event/$node->uid",
        'attributes' => array('title' => t("Read !username's latest event entries.", array('!username' => format_username($node)))),
      );
      $node->content['links']['event'] = array(
        '#theme' => 'links__node__event',
        '#links' => $links,
        '#attributes' => array('class' => array('links', 'inline')),
      );
    }
  }
}

/**
 * Implements hook_menu().
 */
function event_menu() {
  $items['event'] = array(
    'title' => 'Events',
    'page callback' => 'event_page_last',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'event.pages.inc',
  );
  $items['event/%user_uid_optional'] = array(
    'title' => 'My event',
    'page callback' => 'event_page_user',
    'page arguments' => array(1),
    'access callback' => 'event_page_user_access',
    'access arguments' => array(1),
    'file' => 'event.pages.inc',
  );
  $items['event/%user/feed'] = array(
    'title' => 'Events',
    'page callback' => 'event_feed_user',
    'page arguments' => array(1),
    'access callback' => 'event_page_user_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'event.pages.inc',
  );
  $items['event/feed'] = array(
    'title' => 'Events',
    'page callback' => 'event_feed_last',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'event.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function event_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  global $user;

  // Add action link to 'node/add/event' on 'event' page.
  if ($root_path == 'event') {
    $item = menu_get_item('node/add/event');
    if ($item['access']) {
      $item['title'] = t('Create new event entry');
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
  // Provide a helper action link to the author on the 'event/%' page.
  elseif ($root_path == 'event/%' && $router_item['page_arguments'][0]->uid == $user->uid) {
    $data['actions']['output']['event'] = array(
      '#theme' => 'menu_local_action',
    );
    if (user_access('create event content')) {
      $data['actions']['output']['event']['#link']['title'] = t('Post new event entry.');
      $data['actions']['output']['event']['#link']['href'] = 'node/add/event';
    }
    else {
      $data['actions']['output']['event']['#link']['title'] = t('You are not allowed to post a new event entry.');
    }
  }
}

/**
 * Access callback for user event pages.
 */
function event_page_user_access($account) {
  // The visitor must be able to access the site's content.
  // For a event to 'exist' the user must either be able to
  // create new event entries, or it must have existing posts.
  return $account->uid && user_access('access content') && (user_access('create event content', $account) || _event_post_exists($account));
}

/**
 * Helper function to determine if a user has event posts already.
 */
function _event_post_exists($account) {
  return (bool)db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('type', 'event')
    ->condition('uid', $account->uid)
    ->condition('status', 1)
    ->range(0, 1)
    ->addTag('node_access')
    ->execute()
    ->fetchField();
}

/**
 * Implements hook_block_info().
 */
function event_block_info() {
  $block['recent']['info'] = t('Recent event posts');
  $block['recent']['properties']['administrative'] = TRUE;
  return $block;
}

/**
 * Implements hook_block_configure().
 */
function event_block_configure($delta = '') {
  if ($delta == 'recent') {
    $form['event_block_count'] = array(
      '#type' => 'select',
      '#title' => t('Number of recent event posts to display'),
      '#default_value' => variable_get('event_block_count', 10),
      '#options' => drupal_map_assoc(array(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 25, 30)),
    );
    return $form;
  }
}

/**
 * Implements hook_block_save().
 */
function event_block_save($delta = '', $edit = array()) {
  if ($delta == 'recent') {
    variable_set('event_block_count', $edit['event_block_count']);
  }
}

/**
 * Implements hook_block_view().
 *
 * Displays the most recent 10 event titles.
 */
function event_block_view($delta = '') {
  global $user;

  if (user_access('access content')) {
    $result = db_select('node', 'n')
      ->fields('n', array('nid', 'title', 'created'))
      ->condition('type', 'event')
      ->condition('status', 1)
      ->orderBy('created', 'DESC')
      ->range(0, variable_get('event_block_count', 10))
      ->addTag('node_access')
      ->execute();

    if ($node_title_list = node_title_list($result)) {
      $block['subject'] = t('Recent event posts');
      $block['content']['event_list'] = $node_title_list;
      $block['content']['event_more'] = array(
        '#theme' => 'more_link',
        '#url' => 'event',
        '#title' => t('Read the latest event entries.'),
      );

      return $block;
    }
  }
}

/**
 * Implements hook_rdf_mapping().
 */
function event_rdf_mapping() {
  return array(
    array(
      'type' => 'node',
      'bundle' => 'event',
      'mapping' => array(
        'rdftype' => array('sioc:Post', 'sioct:EventPost'),
      ),
    ),
  );
}
