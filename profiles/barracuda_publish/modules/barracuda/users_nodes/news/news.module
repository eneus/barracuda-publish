<?php

/**
 * @file
 * Enables multi-user news.
 */

/**
 * Implements hook_node_info().
 */
function news_node_info() {
  return array(
    'news' => array(
      'name' => t('News entry'),
      'base' => 'news',
      'description' => t('Use for multi-user news. Every user gets a personal news.'),
    )
  );
}

/**
 * Implements hook_user_view().
 */
function news_user_view($account) {
  if (user_access('create news content', $account)) {
    $account->content['summary']['news'] =  array(
      '#type' => 'user_profile_item',
      '#title' => t('News'),
      // l() escapes the attributes, so we should not escape !username here.
      '#markup' => l(t('View recent news entries'), "news/$account->uid", array('attributes' => array('title' => t("Read !username's latest news entries.", array('!username' => format_username($account)))))),
      '#attributes' => array('class' => array('news')),
    );
  }
}

/**
 * Implements hook_help().
 */
function news_help($path, $arg) {
  switch ($path) {
    case 'admin/help#news':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t("The News module allows registered users to maintain an online journal, or <em>news</em>. news are made up of individual <em>news entries</em>. By default, the news entries are displayed by creation time in descending order, with comments enabled, and are promoted to the site's front page. For more information, see the online handbook entry for <a href='@news'>News module</a>.", array('@news' => 'http://drupal.org/handbook/modules/news/')) . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Single-user news') . '</dt>';
      $output .= '<dd>' . t("Each user's news entries are automatically displayed with a link to the user's main news page. You can create as many single-user news as you have site users with permission to create news content.") . '</dd>';
      $output .= '<dt>' . t('Multi-user news') . '</dt>';
      $output .= '<dd>' . t("News entries from each single-user news are also aggregated into one central multi-user news, which displays the news content of all users in a single listing.") . '</dd>';
      $output .= '<dt>' . t('Navigation') . '</dt>';
      $output .= '<dd>' . t("There is an optional <em>News</em> menu item added to the Navigation menu, which displays all news available on your site, and a <em>My news</em> item displaying the current user's news entries.") . '</dd>';
      $output .= '<dt>' . t('Blocks') . '</dt>';
      $output .= '<dd>' . t('The News module also creates a default <em>Recent news posts</em> block that may be enabled at the <a href="@blocks">blocks administration page</a>.', array('@blocks' => url('admin/structure/block'))) . '</dd>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implements hook_form().
 */
function news_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Implements hook_view().
 */
function news_view($node, $view_mode) {
  if ($view_mode == 'full' && node_is_page($node)) {
    // Breadcrumb navigation.  l() escapes title, so we should not escape !name.
    drupal_set_breadcrumb(array(l(t('Home'), NULL), l(t('News'), 'news'), l(t("!name's news", array('!name' => format_username($node))), 'news/' . $node->uid)));
  }
  return $node;
}

/**
 * Implements hook_node_view().
 */
function news_node_view($node, $view_mode) {
  if ($view_mode != 'rss') {
    if ($node->type == 'news' && (arg(0) != 'news' || arg(1) != $node->uid)) {
      // This goes to l(), which escapes !username in both title and attributes.
      $links['news_usernames_news'] = array(
        'title' => t("!username's news", array('!username' => format_username($node))),
        'href' => "news/$node->uid",
        'attributes' => array('title' => t("Read !username's latest news entries.", array('!username' => format_username($node)))),
      );
      $node->content['links']['news'] = array(
        '#theme' => 'links__node__news',
        '#links' => $links,
        '#attributes' => array('class' => array('links', 'inline')),
      );
    }
  }
}

/**
 * Implements hook_menu().
 */
function news_menu() {
  $items['news'] = array(
    'title' => 'News',
    'page callback' => 'news_page_last',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'news.pages.inc',
  );
  $items['news/%user_uid_optional'] = array(
    'title' => 'My news',
    'page callback' => 'news_page_user',
    'page arguments' => array(1),
    'access callback' => 'news_page_user_access',
    'access arguments' => array(1),
    'file' => 'news.pages.inc',
  );
  $items['news/%user/feed'] = array(
    'title' => 'News',
    'page callback' => 'news_feed_user',
    'page arguments' => array(1),
    'access callback' => 'news_page_user_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'news.pages.inc',
  );
  $items['news/feed'] = array(
    'title' => 'News',
    'page callback' => 'news_feed_last',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'news.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function news_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  global $user;

  // Add action link to 'node/add/news' on 'news' page.
  if ($root_path == 'news') {
    $item = menu_get_item('node/add/news');
    if ($item['access']) {
      $item['title'] = t('Create new news entry');
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
  // Provide a helper action link to the author on the 'news/%' page.
  elseif ($root_path == 'news/%' && $router_item['page_arguments'][0]->uid == $user->uid) {
    $data['actions']['output']['news'] = array(
      '#theme' => 'menu_local_action',
    );
    if (user_access('create news content')) {
      $data['actions']['output']['news']['#link']['title'] = t('Post new news entry.');
      $data['actions']['output']['news']['#link']['href'] = 'node/add/news';
    }
    else {
      $data['actions']['output']['news']['#link']['title'] = t('You are not allowed to post a new news entry.');
    }
  }
}

/**
 * Access callback for user news pages.
 */
function news_page_user_access($account) {
  // The visitor must be able to access the site's content.
  // For a news to 'exist' the user must either be able to
  // create new news entries, or it must have existing posts.
  return $account->uid && user_access('access content') && (user_access('create news content', $account) || _news_post_exists($account));
}

/**
 * Helper function to determine if a user has news posts already.
 */
function _news_post_exists($account) {
  return (bool)db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('type', 'news')
    ->condition('uid', $account->uid)
    ->condition('status', 1)
    ->range(0, 1)
    ->addTag('node_access')
    ->execute()
    ->fetchField();
}

/**
 * Implements hook_block_info().
 */
function news_block_info() {
  $block['recent']['info'] = t('Recent news posts');
  $block['recent']['properties']['administrative'] = TRUE;
  return $block;
}

/**
 * Implements hook_block_configure().
 */
function news_block_configure($delta = '') {
  if ($delta == 'recent') {
    $form['news_block_count'] = array(
      '#type' => 'select',
      '#title' => t('Number of recent news posts to display'),
      '#default_value' => variable_get('news_block_count', 10),
      '#options' => drupal_map_assoc(array(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 25, 30)),
    );
    return $form;
  }
}

/**
 * Implements hook_block_save().
 */
function news_block_save($delta = '', $edit = array()) {
  if ($delta == 'recent') {
    variable_set('news_block_count', $edit['news_block_count']);
  }
}

/**
 * Implements hook_block_view().
 *
 * Displays the most recent 10 news titles.
 */
function news_block_view($delta = '') {
  global $user;

  if (user_access('access content')) {
    $result = db_select('node', 'n')
      ->fields('n', array('nid', 'title', 'created'))
      ->condition('type', 'news')
      ->condition('status', 1)
      ->orderBy('created', 'DESC')
      ->range(0, variable_get('news_block_count', 10))
      ->addTag('node_access')
      ->execute();

    if ($node_title_list = node_title_list($result)) {
      $block['subject'] = t('Recent news posts');
      $block['content']['news_list'] = $node_title_list;
      $block['content']['news_more'] = array(
        '#theme' => 'more_link',
        '#url' => 'news',
        '#title' => t('Read the latest news entries.'),
      );

      return $block;
    }
  }
}

/**
 * Implements hook_rdf_mapping().
 */
function news_rdf_mapping() {
  return array(
    array(
      'type' => 'node',
      'bundle' => 'news',
      'mapping' => array(
        'rdftype' => array('sioc:Post', 'sioct:NewsPost'),
      ),
    ),
  );
}
