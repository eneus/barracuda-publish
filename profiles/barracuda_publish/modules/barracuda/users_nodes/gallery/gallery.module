<?php

/**
 * @file
 * Enables multi-user galleries.
 */

/**
 * Implements hook_node_info().
 */
function gallery_node_info() {
  return array(
    'gallery' => array(
      'name' => t('Gallery entry'),
      'base' => 'gallery',
      'description' => t('Use for multi-user galleries. Every user gets a personal gallery.'),
    )
  );
}

/**
 * Implements hook_user_view().
 */
function gallery_user_view($account) {
  if (user_access('create gallery content', $account)) {
    $account->content['summary']['gallery'] =  array(
      '#type' => 'user_profile_item',
      '#title' => t('Gallery'),
      // l() escapes the attributes, so we should not escape !username here.
      '#markup' => l(t('View galleries'), "gallery/$account->uid", array('attributes' => array('title' => t("Read !username's latest gallery entries.", array('!username' => format_username($account)))))),
      '#attributes' => array('class' => array('gallery')),
    );
  }
}

/**
 * Implements hook_help().
 */
function gallery_help($path, $arg) {
  switch ($path) {
    case 'admin/help#gallery':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t("The Gallery module allows registered users to maintain an online journal, or <em>gallery</em>. Galleries are made up of individual <em>gallery entries</em>. By default, the gallery entries are displayed by creation time in descending order, with comments enabled, and are promoted to the site's front page. For more information, see the online handbook entry for <a href='@gallery'>Gallery module</a>.", array('@gallery' => 'http://drupal.org/documentation/modules/gallery/')) . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Single-user galleries') . '</dt>';
      $output .= '<dd>' . t("Each user's gallery entries are automatically displayed with a link to the user's main gallery page. You can create as many single-user galleries as you have site users with permission to create gallery content.") . '</dd>';
      $output .= '<dt>' . t('Multi-user galleries') . '</dt>';
      $output .= '<dd>' . t("Gallery entries from each single-user gallery are also aggregated into one central multi-user gallery, which displays the gallery content of all users in a single listing.") . '</dd>';
      $output .= '<dt>' . t('Navigation') . '</dt>';
      $output .= '<dd>' . t("There is an optional <em>Galleries</em> menu item added to the Navigation menu, which displays all galleries available on your site, and a <em>My gallery</em> item displaying the current user's gallery entries.") . '</dd>';
      $output .= '<dt>' . t('Blocks') . '</dt>';
      $output .= '<dd>' . t('The Gallery module also creates a default <em>Recent gallery posts</em> block that may be enabled at the <a href="@blocks">blocks administration page</a>.', array('@blocks' => url('admin/structure/block'))) . '</dd>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implements hook_form().
 */
function gallery_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Implements hook_view().
 */
function gallery_view($node, $view_mode) {
  if ($view_mode == 'full' && node_is_page($node)) {
    // Breadcrumb navigation.  l() escapes title, so we should not escape !name.
    drupal_set_breadcrumb(array(l(t('Home'), NULL), l(t('Galleries'), 'gallery'), l(t("!name's gallery", array('!name' => format_username($node))), 'gallery/' . $node->uid)));
  }
  return $node;
}

/**
 * Implements hook_node_view().
 */
function gallery_node_view($node, $view_mode) {
  if ($view_mode != 'rss') {
    if ($node->type == 'gallery' && (arg(0) != 'gallery' || arg(1) != $node->uid)) {
      // This goes to l(), which escapes !username in both title and attributes.
      $links['gallery_usernames_gallery'] = array(
        'title' => t("!username's gallery", array('!username' => format_username($node))),
        'href' => "gallery/$node->uid",
        'attributes' => array('title' => t("Read !username's latest gallery entries.", array('!username' => format_username($node)))),
      );
      $node->content['links']['gallery'] = array(
        '#theme' => 'links__node__gallery',
        '#links' => $links,
        '#attributes' => array('class' => array('links', 'inline')),
      );
    }
  }
}

/**
 * Implements hook_menu().
 */
function gallery_menu() {
  $items['gallery'] = array(
    'title' => 'Galleries',
    'page callback' => 'gallery_page_last',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'gallery.pages.inc',
  );
  $items['gallery/%user_uid_optional'] = array(
    'title' => 'My gallery',
    'page callback' => 'gallery_page_user',
    'page arguments' => array(1),
    'access callback' => 'gallery_page_user_access',
    'access arguments' => array(1),
    'file' => 'gallery.pages.inc',
  );
  $items['gallery/%user/feed'] = array(
    'title' => 'Galleries',
    'page callback' => 'gallery_feed_user',
    'page arguments' => array(1),
    'access callback' => 'gallery_page_user_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'gallery.pages.inc',
  );
  $items['gallery/feed'] = array(
    'title' => 'Galleries',
    'page callback' => 'gallery_feed_last',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'gallery.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function gallery_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  global $user;

  // Add action link to 'node/add/gallery' on 'gallery' page.
  if ($root_path == 'gallery') {
    $item = menu_get_item('node/add/gallery');
    if ($item['access']) {
      $item['title'] = t('Create new gallery');
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
  // Provide a helper action link to the author on the 'gallery/%' page.
  elseif ($root_path == 'gallery/%' && $router_item['page_arguments'][0]->uid == $user->uid) {
    $data['actions']['output']['gallery'] = array(
      '#theme' => 'menu_local_action',
    );
    if (user_access('create gallery content')) {
      $data['actions']['output']['gallery']['#link']['title'] = t('Post new gallery.');
      $data['actions']['output']['gallery']['#link']['href'] = 'node/add/gallery';
    }
    else {
      $data['actions']['output']['gallery']['#link']['title'] = t('You are not allowed to post a new gallery.');
    }
  }
}

/**
 * Access callback for user gallery pages.
 */
function gallery_page_user_access($account) {
  // The visitor must be able to access the site's content.
  // For a gallery to 'exist' the user must either be able to
  // create new gallery entries, or it must have existing posts.
  return $account->uid && user_access('access content') && (user_access('create gallery content', $account) || _gallery_post_exists($account));
}

/**
 * Helper function to determine if a user has gallery posts already.
 */
function _gallery_post_exists($account) {
  return (bool)db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('type', 'gallery')
    ->condition('uid', $account->uid)
    ->condition('status', 1)
    ->range(0, 1)
    ->addTag('node_access')
    ->execute()
    ->fetchField();
}

/**
 * Implements hook_block_info().
 */
function gallery_block_info() {
  $block['recent']['info'] = t('Recent gallery posts');
  $block['recent']['properties']['administrative'] = TRUE;
  return $block;
}

/**
 * Implements hook_block_configure().
 */
function gallery_block_configure($delta = '') {
  if ($delta == 'recent') {
    $form['gallery_block_count'] = array(
      '#type' => 'select',
      '#title' => t('Number of recent gallery posts to display'),
      '#default_value' => variable_get('gallery_block_count', 10),
      '#options' => drupal_map_assoc(array(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 25, 30)),
    );
    return $form;
  }
}

/**
 * Implements hook_block_save().
 */
function gallery_block_save($delta = '', $edit = array()) {
  if ($delta == 'recent') {
    variable_set('gallery_block_count', $edit['gallery_block_count']);
  }
}

/**
 * Implements hook_block_view().
 *
 * Displays the most recent 10 gallery titles.
 */
function gallery_block_view($delta = '') {
  global $user;

  if (user_access('access content')) {
    $result = db_select('node', 'n')
      ->fields('n', array('nid', 'title', 'created'))
      ->condition('type', 'gallery')
      ->condition('status', 1)
      ->orderBy('created', 'DESC')
      ->range(0, variable_get('gallery_block_count', 10))
      ->addTag('node_access')
      ->execute();

    if ($node_title_list = node_title_list($result)) {
      $block['subject'] = t('Recent gallery posts');
      $block['content']['gallery_list'] = $node_title_list;
      $block['content']['gallery_more'] = array(
        '#theme' => 'more_link',
        '#url' => 'gallery',
        '#title' => t('Read the latest gallery.'),
      );

      return $block;
    }
  }
}

/**
 * Implements hook_rdf_mapping().
 */
function gallery_rdf_mapping() {
  return array(
    array(
      'type' => 'node',
      'bundle' => 'gallery',
      'mapping' => array(
        'rdftype' => array('sioc:Post', 'sioct:GalleryPost'),
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function gallery_field_formatter_info() {
  $formatters = array(
    'gallery' => array(
      'label' => t('Gallery'),
      'field types' => array('image'),
      'settings' => array('image_style' => '', 'image_link' => '', 'file_entity_link' => ''),
    ),
  );

  return $formatters;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function gallery_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $image_styles = image_style_options(FALSE);
  $element['image_style'] = array(
    '#title' => t('Image style'),
    '#type' => 'select',
    '#default_value' => $settings['image_style'],
    '#empty_option' => t('None (original image)'),
    '#options' => $image_styles,
  );

  $link_types = array(
    'content' => t('Content'),
    'file' => t('File'),
    'file_entity_link' => t('File page'),
  );
  $element['image_link'] = array(
    '#title' => t('Link image to'),
    '#type' => 'select',
    '#default_value' => $settings['image_link'],
    '#empty_option' => t('Nothing'),
    '#options' => $link_types,
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function gallery_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  $image_styles = image_style_options(FALSE);
  // Unset possible 'No defined styles' option.
  unset($image_styles['']);
  // Styles could be lost because of enabled/disabled modules that defines
  // their styles in code.
  if (isset($image_styles[$settings['image_style']])) {
    $summary[] = t('Image style: @style', array('@style' => $image_styles[$settings['image_style']]));
  }
  else {
    $summary[] = t('Original image');
  }

  $link_types = array(
    'content' => t('Linked to content'),
    'file' => t('Linked to file'),
    'file_entity_link' => t('Linked to file page'),
  );
  // Display this setting only if image is linked.
  if (isset($link_types[$settings['image_link']])) {
    $summary[] = $link_types[$settings['image_link']];
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function gallery_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  // Check if the formatter involves a link.
  if ($display['settings']['image_link'] == 'content') {
    $uri = entity_uri($entity_type, $entity);
  }
  elseif ($display['settings']['image_link'] == 'file') {
    $link_file = TRUE;
  }
  elseif ($display['settings']['image_link'] == 'file_entity_link') {
    $link_file = TRUE;
  }
  foreach ($items as $delta => $item) {
    if (isset($link_file)) {
	  $node = entity_uri($entity_type, $entity);
      $uri = array(
        'path' => files_node_get_url ($item['fid']),
        'options' => array(),
      );
    }
    $element[$delta] = array(
      '#theme' => 'image_formatter',
      '#item' => $item,
      '#image_style' => $display['settings']['image_style'],
      '#path' => isset($uri) ? $uri : '',
    );
  }
//drupal_set_message(t('Submitting values: @values', array('@values' => var_export($node))));

  return $element;
}
