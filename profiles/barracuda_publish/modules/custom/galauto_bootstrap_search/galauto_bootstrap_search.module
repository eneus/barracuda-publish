<?php

 	//drupal_add_js(drupal_get_path('profiles', 'baracuda_publish') . 'libraries/bootstrap/js/bootstrap.js');


 /**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 */
function galauto_bootstrap_search_block_info() {
  // This hook returns an array, each component of which is an array of block
  // information. The array keys are the 'delta' values used in other block
  // hooks.
  //
  // The required block information is a block description, which is shown
  // to the site administrator in the list of possible blocks. You can also
  // provide initial settings for block weight, status, etc.
  //
  // Many options are defined in hook_block_info():

  // This sample shows how to provide default settings. In this case we'll
  // enable the block in the first sidebar and make it visible only on
  // 'node/*' pages. See the hook_block_info() documentation for these.

  $blocks['bootstrap_search'] = array(
    'info' => t('Bootstrap search block'),
    'status' => TRUE,
    'region' => 'bootstrap_modal_search_region',
  );

  return $blocks;
}


/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function galauto_bootstrap_search_block_view($delta = '') {
  // The $delta parameter tells us which block is being requested.
  switch ($delta) {

    case 'bootstrap_search':
      //$block['subject'] = t('block_cookie_set');
      $block['subject'] = t('My text bootstarap');
      $block['content'] = block_example_contents($delta);
     
      break;
  }

  return $block;
}



function block_example_contents($which_block) {
  switch ($which_block) {
    case 'bootstrap_search':
    	drupal_add_js('profiles/baracuda_publish/libraries/bootstrap/js/bootstrap.js');
      // Modules would typically perform some database queries to fetch the
      // content for their blocks. Here, we'll just use the variable set in the
      // block configuration or, if none has set, a default value.
      // Block content can be returned in two formats: renderable arrays
      // (as here) are preferred though a simple string will work as well.
      // Block content created through the UI defaults to a string.
      $result = array(
        '#markup' => variable_get('block_example_string', t('A default value. This block was created at %time', array('%time' => date('c')))),
      );
      return $result;

  }
}