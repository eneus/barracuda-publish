<?php

/**
 * @file
 * Module file for image_example
 */


/**
* adding js files;
*/

/**
* Implements hook_field_formatter_info().
*/
function galauto_formater_reference_field_formatter_info() {
  $info = array(
    'my_formater' => array(
      'label' => t('Complectations'), 
      'field types' => array('entityreference'),
      'description' => t('Cars Complectations'),
      'settings' => array(
        'view_mode' => 'default',
        'links' => TRUE,
      ),
    ), 
  );
  return $info;
}



/**
 * Implements hook_field_formatter_settings_form().
 */
function galauto_formater_reference_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];


  if ($display['type'] == 'my_formater') {
    $entity_info = entity_get_info($field['settings']['target_type']);
    $options = array('default' => t('Default'), 'teaser' => t('Teaser'));
    // if (!empty($entity_info['view modes'])) {
    //   foreach ($entity_info['view modes'] as $view_mode => $view_mode_settings) {
    //     $options[$view_mode] = $view_mode_settings['label'];
    //   }
    // }

    $element['view_mode'] = array(
      '#type' => 'select',
      '#options' => $options,
      '#title' => t('View mode'),
      '#default_value' => $settings['view_mode'],
      '#access' => count($options) > 1,
    );

    // $element['links'] = array(
    //   '#type' => 'checkbox',
    //   '#title' => t('Show links'),
    //   '#default_value' => $settings['links'],
    // );
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function galauto_formater_reference_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  
  if ($display['type'] == 'my_formater') {
    $entity_info = entity_get_info($field['settings']['target_type']);
    $view_mode_label = $settings['view_mode'] == 'default' ? t('Default') : $settings['view_mode'];
    if (isset($entity_info['view modes'][$settings['view_mode']]['label'])) {
      $view_mode_label = $entity_info['view modes'][$settings['view_mode']]['label'];
    }
    $summary[] = t('Rendered as @mode', array('@mode' => $view_mode_label));
    //$summary[] = !empty($settings['links']) ? t('Display links') : t('Do not display links');
  }

  return implode('<br />', $summary);
}






/**
 * Implements hook_field_formatter_prepare_view().
 */
function galauto_formater_reference_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays) {
  $target_ids = array();

  // Collect every possible entity attached to any of the entities.
  foreach ($entities as $id => $entity) {
    foreach ($items[$id] as $delta => $item) {
      if (isset($item['target_id'])) {
        $target_ids[] = $item['target_id'];
      }
    }
  }

  if ($target_ids) {
    $target_entities = entity_load($field['settings']['target_type'], $target_ids);
  }
  else {
    $target_entities = array();
  }

  // Iterate through the fieldable entities again to attach the loaded data.
  foreach ($entities as $id => $entity) {
    $rekey = FALSE;
    
    foreach ($items[$id] as $delta => $item) {
      // Check whether the referenced entity could be loaded.
      if (isset($target_entities[$item['target_id']])) {
        // Replace the instance value with the term data.
        $items[$id][$delta]['entity'] = $target_entities[$item['target_id']];
        // Check whether the user has access to the referenced entity.
        $has_view_access = (entity_access('view', $field['settings']['target_type'], $target_entities[$item['target_id']]) !== FALSE);
        $has_update_access = (entity_access('update', $field['settings']['target_type'], $target_entities[$item['target_id']]) !== FALSE);
        $items[$id][$delta]['access'] = ($has_view_access || $has_update_access);
      }
      // Otherwise, unset the instance value, since the entity does not exist.
      else {
        unset($items[$id][$delta]);
        $rekey = TRUE;
      }
    }


    if ($rekey) {
      // Rekey the items array.
      $items[$id] = array_values($items[$id]);

    }
  }
}



function my_sort_settings($a,$b)
{
  if ($a['settings']['weight']==$b['settings']['weight']) return 0;
    return ($a['settings']['weight'] < $b['settings']['weight'])?-1:1;
}

function my_sort_groups($a,$b)
{
  if ($a['fields'][0]['settings']['weight'] == $b['fields'][0]['settings']['weight']) return 0;
    return ($a['fields'][0]['settings']['weight'] < $b['fields'][0]['settings']['weight'])?-1:1;

}



/**
 * Implements hook_field_formatter_view().
 */
function galauto_formater_reference_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  drupal_add_css(drupal_get_path('module', 'galauto_formater_reference') . '/css/galauto_formater_reference.css');
  $result = array();
  $element = array();
  $settings = $display['settings'];
  //select content type name
  $reference_content_type = $items[0]['entity']->type;
 

  //Rebuild the items list to contain only those with access.
  foreach ($items as $key => $item) {
    if (empty($item['access'])) {
      unset($items[$key]);
    }
  }

  switch ($display['type']) {
    
    case 'my_formater':

      if ($settings['view_mode'] == 'default') {
        $settings['view_mode'] = 'form';
      }


      /*deserialize composed filds   */
    
      $complectation_title = array();
      foreach ($items as $delta => $item) {
        // array of node id`s
        $reference_node_id[] = $item['target_id'];
        // array of link`s titles of complectations
        $nodeurl = url('node/'. $item['target_id']);
        $complectation_title[] = '<span style="font-size:14px;">'.l($item['entity']->title, $nodeurl, array('absolute' => TRUE)).'</span>';
      }
      
      // array with all date for formating (groups and filds info)
      $all_group_date = array();

      $all_group_date['title_group'] = array(
        'group' => '',
        'fields' =>  array(
          0 => array(
            'label' => '<span style="font-size:18px">'.ucfirst($items[0]['entity']->type).'</span>',
            'items' => $complectation_title,
            'settings' => array(
              'suffix' => '',
              'prefix' => '',
              'weight' => 0,
            ),
          ),
        ),
      );


      //array for all filds info of selected content type
      $node_fields = array();  
      $node_fields = field_info_instances('node', $reference_content_type); 
      //dpm($node_fields);
      $fields_info = array();
      //$fields_settings = array();

      if ($settings['view_mode'] != 'teaser') {
        foreach ($node_fields as $key => $value) {
          if ($value['display']['default']['type'] != 'hidden') {
            $fields_info[$key]['label'] = $value['label'];
            $fields_info[$key]['items'] = array(); 
            if (isset($value['settings']['suffix'])) {
              $fields_info[$key]['settings']['suffix'] = $value['settings']['suffix'];
              $fields_info[$key]['settings']['prefix'] = $value['settings']['prefix'];    
            }
            else {
              $fields_info[$key]['settings']['suffix'] = '';
              $fields_info[$key]['settings']['prefix'] = ''; 
            }
            $fields_info[$key]['settings']['weight'] = $value['widget']['weight']; 
          }
        }
      }
      else {
        foreach ($node_fields as $key => $value) {
          if ($value['display']['teaser']['type'] != 'hidden') {
            $fields_info[$key]['label'] = $value['label'];
            $fields_info[$key]['items'] = array(); 
            if (isset($value['settings']['suffix'])) {     
              $fields_info[$key]['settings']['suffix'] = $value['settings']['suffix'];
              $fields_info[$key]['settings']['prefix'] = $value['settings']['prefix'];     
            }
            else {
              $fields_info[$key]['settings']['suffix'] = '';
              $fields_info[$key]['settings']['prefix'] = ''; 
            }  
            $fields_info[$key]['settings']['weight'] = $value['widget']['weight']; 
          }
        }
      }


      // taxonometry values array
      $tax_all = array();
      foreach ($node_fields as $key => $value) {
        $tax_type_info = field_info_field($key);
        if ($tax_type_info['type'] == 'taxonomy_term_reference') { 
          $tax_name_info = $tax_type_info['settings']['allowed_values'][0]['vocabulary'];
          $tax_info = taxonomy_vocabulary_machine_name_load($tax_name_info);
          $tax_vid_info = $tax_info->vid;
          $tax_tree_info = taxonomy_get_tree($tax_vid_info);
          foreach ($tax_tree_info as  $val) {
            $tax_all[$key][$val->tid] = $val->name;   
          }   
        }
      }
     

      //sorting fields
      uasort($fields_info,"my_sort_settings");
     

      //array for all fild groups info of selected content type
      $field_groups_info = array();
      $field_groups_info = field_group_info_groups('node',  $reference_content_type);
      $groups_fields = array();

      if (isset($field_groups_info[$settings['view_mode']])) {
        foreach ($field_groups_info[$settings['view_mode']] as $key => $value) {
          $groups_fields[$key]['group'] = $value->label;
          if (!empty($value->children)) {
            foreach ($value->children as $field) {
              $groups_fields[$key]['fields'][] = $field;
            }
          }   
          else {
            $groups_fields[$key]['fields']  = array();
          }
        }
      }



      //adding empty groups for fields with no group
      foreach ($fields_info as $field => $field_info) {
        $bool_no_group = true;
        foreach ($groups_fields as $group => $group_info) {
          if (!empty($group_info['fields'])) {
            foreach ($group_info['fields'] as $field_name ) {
             if ($field == $field_name) {
                $bool_no_group = false;
                continue 2;
              } 
            }
          }
        }
        if ($bool_no_group == true) {
          $groups_fields["group_empty_".$field]['group'] = '';
          $groups_fields["group_empty_".$field]['fields'][] = $field;
        }
      }

     
      
      // adding values to fields array
      foreach ($items as $delta => $item) {
        foreach ($fields_info as $name => $label) {
          $field_value = $item['entity']->$name; 
          if (!empty($field_value[LANGUAGE_NONE])) {
            foreach ($field_value[LANGUAGE_NONE] as $key => $value) { 
              if (isset($field_value[LANGUAGE_NONE][$key]['value'])) {
                if (!isset($fields_info[$name]['items'][$delta])) {
                  $fields_info[$name]['items'][$delta] = array();
                }
                $fields_info[$name]['items'][$delta][] = $value['value'];
              }
              elseif (isset($field_value[LANGUAGE_NONE][$key]['tid'])) {
                $taxonomy_tid = $field_value[LANGUAGE_NONE][$key]['tid'];
                foreach ($tax_all[$name] as $tax_tid => $tax_value) {
                  if ($taxonomy_tid == $tax_tid) {
                    $taxonomy_tid = $tax_value;
                  }
                }
                $fields_info[$name]['items'][$delta] = $taxonomy_tid;
              }     
            }
          }
          else {
            $fields_info[$name]['items'][$delta] = NULL;
          }
          if (is_array($fields_info[$name]['items'][$delta])) {
            $fields_info[$name]['items'][$delta] = implode(' x ', $fields_info[$name]['items'][$delta]) . '&nbsp;';
          }
        }
      }

     

       //filling main array for formating (group array + fields array)
      foreach ($fields_info as $field_key => $field) {
        foreach ($groups_fields as $group_key => $group) {
          if (!empty($group['fields'])) {
            foreach ($group['fields'] as  $field_name) { 
              if ($field_key === $field_name ) {
                $all_group_date[$group_key]['group'] = $group['group'];
                $all_group_date[$group_key]['fields'][]= $field;
                continue 2;
              }
            }
          }
          // else {
              
          //     $all_group_date[$group_key]['group'] = $group['group'];
          //     $all_group_date[$group_key]['fields'] = array();
          //     continue ;
          // }
        }
      }


      //sorting fields
      uasort($all_group_date,"my_sort_groups");
      //dpm($all_group_date);

      
      // array given to template for formating
      $element[] = array('#theme' => 'galauto_formater_reference_my_formater',
                          '#groups' => $all_group_date,
      );

    break;
  }
  
  return $element;
}



/**
* Implements hook_theme().
*/
function galauto_formater_reference_theme() {
  return array(
    'galauto_formater_reference_my_formater' => array(
      'template' => 'galauto_formater_reference_my_formater',
      'variables' => array(
        'groups' => array(),

      ),
    ),
  );
} 





